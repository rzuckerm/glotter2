name: Makefile CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  read-config:
    name: Read Config
    runs-on: ubuntu-latest

    outputs:
      first-python-version: "${{ steps.first-python-version.outputs.first-python-version }}"
      python-versions: "${{ steps.python-versions.outputs.python-versions }}"
      poetry-version: "${{ steps.repo-config.outputs['poetry-version'] }}"
      oses: "${{ steps.oses.outputs.oses }}"

    steps:
      - uses: actions/checkout@v4
  
      - name: Read repo config
        uses: pietrobolcato/action-read-yaml@1.1.0
        id: repo-config
        with:
          config: repo-config.yml

      - name: Get first python version
        id: first-python-version
        run: |
          ./scripts/get-first-item.sh \
            "first-python-version" \
            "${{ steps.repo-config.outputs['python-versions'] }}" >>"$GITHUB_OUTPUT"

      - name: JSONify python versions
        id: python-versions
        run: |
          ./scripts/jsonify-items.sh \
            "python-versions" \
            "${{ steps.repo-config.outputs['python-versions'] }}" \
            "0-9." >>"$GITHUB_OUTPUT"

      - name: JSONify OSes
        id: oses
        run: |
          ./scripts/jsonify-items.sh \
            "oses" \
            "${{ steps.repo-config.outputs['oses'] }}" \
            "^," >>"$GITHUB_OUTPUT"
    
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: read-config

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: "${{ needs.read-config.outputs.first-python-version }}"

    - uses: snok/install-poetry@v1
      with:
        version: "${{ needs.read-config.outputs.poetry-version }}"
        virtualenvs-create: false
        virtualenvs-in-project: false

    - name: Lint
      run: make lint

  test:
    name: Test
    needs: read-config

    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.read-config.outputs.python-versions) }}
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: "${{ matrix.python-version }}"

    - uses: snok/install-poetry@v1
      with:
        version: "${{ needs.read-config.outputs.poetry-version }}"
        virtualenvs-create: false
        virtualenvs-in-project: false

    - name: Test
      run: make test

  test-results:
    name: Test Results
    needs: test
    runs-on: ubuntu-latest
    if: ${{ always() }}

    steps:
      - run: |
          result="${{ needs.test.result }}"
          if [[ $result == "success" ]]; then
            exit 0
          else
            exit 1
          fi

  doc:
    name: Doc
    runs-on: ubuntu-latest
    needs: read-config

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: "${{ needs.read-config.outputs.first-python-version }}"

    - uses: snok/install-poetry@v1
      with:
        version: "${{ needs.read-config.outputs.poetry-version }}"
        virtualenvs-create: false
        virtualenvs-in-project: false

    - name: Test
      run: make test

    - name: Coverage Badge
      run: make coverage-badge

    - name: Doc
      run: make doc

    - name: Copy code coverage
      run: cp -r .meta/html_cov .meta/doc

    - name: Move coverage badge
      run: mv .meta/html_cov/badge.svg .meta/doc

    - name: Publish doc
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: .meta/doc
        token: ${{ secrets.REPO_TOKEN }}
      if: ${{ github.ref == 'refs/heads/main' }}
